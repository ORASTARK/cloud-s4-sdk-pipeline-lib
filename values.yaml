# Copied from https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/kubernetes-helm

# Default values for Jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

master:
  image: "ppiper/jenkins-master"
  tag: "latest"

  # Below is the implementation of Jenkins Configuration as Code.  Add a key under ConfigScripts for each configuration area,
  # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
  # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
  # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration YAML file on the master in
  # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code plugin.  The lines after each |
  # become the content of the configuration YAML file.  The first line after this is a JCasC root element, eg jenkins, credentials,
  # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
  JCasC:
    enabled: true
    pluginVersion: 1.5
    supportPluginVersion: 1.5
    configScripts:
      welcome-message: |
        jenkins:
          systemMessage: Welcome from my k8s cluster
          numExecutors: 10
        unclassified:
          globallibraries:
            libraries:
            - defaultVersion: "master"
              name: "s4sdk-pipeline-library"
              retriever:
                modernSCM:
                  scm:
                    git:
                      remote: "https://github.com/SAP/cloud-s4-sdk-pipeline-lib.git"
            - defaultVersion: "master"
              name: "piper-library-os"
              retriever:
                modernSCM:
                  scm:
                    git:
                      remote: "https://github.com/SAP/jenkins-library.git"
        jobs:
          - script: >
              multibranchPipelineJob('validation-job') {
                  branchSources {
                      git {
                          id('validation-job')
                          remote("https://github.com/piper-validation/cloud-s4-sdk-book")
                          includes('sdk-lib-test-mta-k8s')
                      }
                  }
              }

  # List of plugins to be install during Jenkins master start
  installPlugins:
    - kubernetes:latest
    - kubernetes-credentials:latest
    - workflow-aggregator:latest
    - workflow-job:latest
    - credentials-binding:latest
    - git:latest
    - analysis-collector
    - ansicolor
    - badge
    - blueocean
    - build-monitor-plugin
    - build-timeout
    - checkmarx
    - cobertura
    - command-launcher
    - configuration-as-code
    - configuration-as-code-support
    - credentials
    - credentials-binding
    - cucumber-testresult-plugin
    - docker-workflow
    - email-ext
    - findbugs
    - gatling
    - ghprb
    - github-branch-source
    - greenballs
    - htmlpublisher
    - http_request
    - jacoco
    - job-dsl
    - junit
    - kubernetes
    - lockable-resources
    - matrix-auth
    - nexus-artifact-uploader
    - parameterized-trigger
    - performance
    - pipeline-build-step
    - pipeline-github
    - pipeline-input-step
    - pipeline-milestone-step
    - pipeline-stage-step
    - pipeline-utility-steps
    - pmd
    - rebuild
    - saferestart
    - ssh-agent
    - timestamper
    - warnings-ng
    - workflow-aggregator
    - workflow-basic-steps
    - workflow-cps
    - workflow-multibranch
